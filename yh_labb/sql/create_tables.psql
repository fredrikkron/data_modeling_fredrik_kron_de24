SET search_path TO yrkesco;

CREATE TABLE IF NOT EXISTS City (
    city_id SERIAL PRIMARY KEY,
    city_name VARCHAR(50) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS yrkesco.Address (
    address_id SERIAL PRIMARY KEY,
    street VARCHAR(100) NOT NULL,
    postal_code VARCHAR(6) NOT NULL,
    city_id INT NOT NULL,
    FOREIGN KEY(city_id) REFERENCES yrkesco.city (city_id)
);

CREATE TABLE IF NOT EXISTS yrkesco.School (
    school_id SERIAL PRIMARY KEY,
    school_name VARCHAR(50) UNIQUE NOT NULL,
    address_id INT NOT NULL,
    FOREIGN KEY(address_id) REFERENCES yrkesco.address (address_id)
);

CREATE TABLE IF NOT EXISTS yrkesco.Consult_Company (
    company_id SERIAL PRIMARY KEY,
    company_name VARCHAR(100) UNIQUE NOT NULL,
    address_id INT NOT NULL,
    FOREIGN KEY(address_id) REFERENCES yrkesco.address (address_id),
    org_number VARCHAR(12) UNIQUE NOT NULL,
    f_tax BOOLEAN NOT NULL
);

CREATE TABLE IF NOT EXISTS yrkesco.Personal_Info (
    personal_info_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    personal_number VARCHAR(12) UNIQUE NOT NULL,
    phone_number VARCHAR(15) UNIQUE NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS yrkesco.Consult_Teacher (
    consult_id SERIAL PRIMARY KEY,
    personal_info_id INT NOT NULL,
    FOREIGN KEY(personal_info_id) REFERENCES yrkesco.Personal_Info(personal_info_id),
    company_id INT NOT NULL,
    FOREIGN KEY(company_id) REFERENCES yrkesco.Consult_Company(company_id),
    hourly_fee DECIMAL(5,2) NOT NULL  
);


CREATE TABLE IF NOT EXISTS yrkesco.Student (
    student_id SERIAL PRIMARY KEY,
    personal_info_id INT NOT NULL,
    FOREIGN KEY(personal_info_id) REFERENCES yrkesco.Personal_info(personal_info_id)
);

CREATE TABLE IF NOT EXISTS yrkesco.Course (
    course_id SERIAL PRIMARY KEY,
    course_name VARCHAR(100) UNIQUE NOT NULL,
    course_code VARCHAR(10) UNIQUE NOT NULL,
    course_points INT NOT NULL,
    course_type VARCHAR(20) NOT NULL,
    description VARCHAR(300) NOT NULL
);

-- ALTER TABLE yrkesco.school RENAME COLUMN name TO school_name;

CREATE TABLE IF NOT EXISTS yrkesco.Enrollment (
    enrollment_id SERIAL PRIMARY KEY,
    student_id INT NOT NULL,
    FOREIGN KEY (student_id) REFERENCES yrkesco.Student(student_id),
    course_id INT NOT NULL, 
    FOREIGN KEY (course_id) REFERENCES yrkesco.Course(course_id),
    class_id INT,
    grade VARCHAR(3) NOT NULL,
    term VARCHAR(10) NOT NULL,
    year INT NOT NULL
);

-- ALTER TABLE yrkesco.Enrollment RENAME COLUMN year TO enrollment_year;
-- ALTER TABLE yrkesco.Enrollment ALTER COLUMN grade DROP NOT NULL;

CREATE TABLE IF NOT EXISTS yrkesco.Employment_Type (
    employment_type_id SERIAL PRIMARY KEY,
    type_name VARCHAR(100) UNIQUE NOT NULL
)

CREATE TABLE IF NOT EXISTS yrkesco.Teacher (
    teacher_id SERIAL PRIMARY KEY,
    personal_info_id INT NOT NULL,
    FOREIGN KEY (personal_info_id) REFERENCES yrkesco.Personal_info(personal_info_id),
    employment_type_id INT NOT NULL,
    FOREIGN KEY (employment_type_id) REFERENCES yrkesco.Employment_Type(employment_type_id)
);

CREATE TABLE IF NOT EXISTS yrkesco.Program (
    program_id SERIAL PRIMARY KEY,
    program_name VARCHAR(100) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS yrkesco.Education_Leader (
    education_leader_id SERIAL PRIMARY KEY,
    personal_info_id INT NOT NULL,
    FOREIGN KEY (personal_info_id) REFERENCES yrkesco.Personal_info(personal_info_id)
);

CREATE TABLE IF NOT EXISTS yrkesco.Teacher_Course (
    teacher_id INT NOT NULL,
    FOREIGN KEY (teacher_id) REFERENCES yrkesco.Teacher(teacher_id),
    course_id INT NOT NULL,
    FOREIGN KEY (course_id) REFERENCES yrkesco.Course(course_id),
    PRIMARY KEY (teacher_id, course_id)
);

CREATE TABLE IF NOT EXISTS yrkesco.Program_Course (
    program_id INT NOT NULL,
    FOREIGN KEY (program_id) REFERENCES yrkesco.Program(program_id),
    course_id INT NOT NULL,
    FOREIGN KEY (course_id) REFERENCES yrkesco.Course(course_id),
    PRIMARY KEY (program_id, course_id)
);

